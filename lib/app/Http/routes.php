<?php

/**
 * GEOSERVER API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * GEOSERVER API
 * @version 0.0.1
 */

$app->get('/', function () use ($app) {
    return $app->version();
});

/**
 * post createAccessResource
 * Summary: Create Access Resource
 * Notes: Create AccessResource
 * Output-Formats: [application/json]
 */
$app->post('/accessResources', 'AccessResourcesApi@createAccessResource');
/**
 * get listAccessResources
 * Summary: List of AccessResources
 * Notes: get list of AccessResources
 * Output-Formats: [application/json]
 */
$app->get('/accessResources', 'AccessResourcesApi@listAccessResources');
/**
 * patch updateAccessResource
 * Summary: Updates a AccessResource
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/accessResources', 'AccessResourcesApi@updateAccessResource');
/**
 * delete deleteAccessResource
 * Summary: Deletes a AccessResource
 * Notes: Deletes a AccessResource
 * Output-Formats: [application/json]
 */
$app->delete('/accessResources/{accessResourceId}', 'AccessResourcesApi@deleteAccessResource');
/**
 * get getAccessResourceById
 * Summary: Find Access Page by ID
 * Notes: Returns a single AccessResource
 * Output-Formats: [application/json]
 */
$app->get('/accessResources/{accessResourceId}', 'AccessResourcesApi@getAccessResourceById');
/**
 * post login
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
$app->post('/login', 'AuthApi@login');
/**
 * get logout
 * Summary:
 * Notes:
 * Output-Formats: [application/json]
 */
$app->get('/logout', 'AuthApi@logout');
/**
 * get listClients
 * Summary: List of Client
 * Notes: get list of Client
 * Output-Formats: [application/json]
 */
$app->get('/client', 'CompaniesApi@listClients');
/**
 * post createCompany
 * Summary: Create Company
 * Notes: Create Company
 * Output-Formats: [application/json]
 */
$app->post('/companies', 'CompaniesApi@createCompany');
/**
 * get listCompanies
 * Summary: List of Companies
 * Notes: get list of Companies
 * Output-Formats: [application/json]
 */
$app->get('/companies', 'CompaniesApi@listCompanies');
/**
 * patch updateCompany
 * Summary: Updates a company
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/companies', 'CompaniesApi@updateCompany');
/**
 * delete deleteCompany
 * Summary: Delete a company
 * Notes: Delete a company
 * Output-Formats: [application/json]
 */
$app->delete('/companies/{companyId}', 'CompaniesApi@deleteCompany');
/**
 * get getCompanyById
 * Summary: Find company by ID
 * Notes: Returns a single company
 * Output-Formats: [application/json]
 */
$app->get('/companies/{companyId}', 'CompaniesApi@getCompanyById');
/**
 * post createDeviceAttachment
 * Summary: Create Device Attachment
 * Notes: Create Device Attachment
 * Output-Formats: [application/json]
 */
$app->post('/deviceAttachment', 'DeviceAttachmentApi@createDeviceAttachment');
/**
 * get listDeviceAttachment
 * Summary: List of device attachment
 * Notes: get list of device attachment
 * Output-Formats: [application/json]
 */
$app->get('/deviceAttachment', 'DeviceAttachmentApi@listDeviceAttachment');
/**
 * get getDeviceAttachmentByProductId
 * Summary: Find Device Attachment by company ID
 * Notes: Returns a single  Device Attachment
 * Output-Formats: [application/json]
 */
$app->get('/deviceAttachment/product/{productId}', 'DeviceAttachmentApi@getDeviceAttachmentByProductId');
/**
 * delete deleteDeviceAttachment
 * Summary: Delete a Device Attachment
 * Notes: Delete a Device Attachment
 * Output-Formats: [application/json]
 */
$app->delete('/deviceAttachment/{deviceAttachmentId}', 'DeviceAttachmentApi@deleteDeviceAttachment');
/**
 * post createDeviceData
 * Summary: Create Device Data
 * Notes: Create Device Data
 * Output-Formats: [application/json]
 */
$app->post('/deviceData', 'DeviceDataApi@createDeviceData');
/**
 * get listDeviceData
 * Summary: List of device data
 * Notes: get list of device data
 * Output-Formats: [application/json]
 */
$app->get('/deviceData', 'DeviceDataApi@listDeviceData');
/**
 * patch updateDeviceData
 * Summary: Updates a Device Data
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/deviceData', 'DeviceDataApi@updateDeviceData');
/**
 * get listDeviceDataByDeviceId
 * Summary: List of device data by device id
 * Notes: get list of device data by device id
 * Output-Formats: [application/json]
 */
$app->get('/deviceData/device/{deviceId}', 'DeviceDataApi@listDeviceDataByDeviceId');
/**
 * delete deleteDeviceData
 * Summary: Delete a Device Data
 * Notes: Delete a DeviceData
 * Output-Formats: [application/json]
 */
$app->delete('/deviceData/{deviceDataId}', 'DeviceDataApi@deleteDeviceData');
/**
 * get getDeviceDataById
 * Summary: Find Device Data by ID
 * Notes: Returns a single DeviceData
 * Output-Formats: [application/json]
 */
$app->get('/deviceData/{deviceDataId}', 'DeviceDataApi@getDeviceDataById');
/**
 * post createDevice
 * Summary: Create Device
 * Notes: Create Device
 * Output-Formats: [application/json]
 */
$app->post('/devices', 'DevicesApi@createDevice');
/**
 * get listDevices
 * Summary: List of Devices
 * Notes: get list of Device
 * Output-Formats: [application/json]
 */
$app->get('/devices', 'DevicesApi@listDevices');
/**
 * patch updateDevice
 * Summary: Updates a device
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/devices', 'DevicesApi@updateDevice');
/**
 * delete deleteDevice
 * Summary: Delete a Device
 * Notes: Delete a Device
 * Output-Formats: [application/json]
 */
$app->delete('/devices/{deviceId}', 'DevicesApi@deleteDevice');
/**
 * get getDeviceById
 * Summary: Find Device by ID
 * Notes: Returns a single Device
 * Output-Formats: [application/json]
 */
$app->get('/devices/{deviceId}', 'DevicesApi@getDeviceById');
/**
 * get listFacturations
 * Summary: List of facturations by company id and site id
 * Notes: get list of Facturations by company id and site id
 * Output-Formats: [application/json]
 */
$app->get('/facturations/company/{companyId}/site/{siteId}', 'FacturationsApi@listFacturations');
/**
 * post createProductRent
 * Summary: Create Product Rents
 * Notes: Create Product Rents
 * Output-Formats: [application/json]
 */
$app->post('/productRents', 'ProductRentsApi@createProductRent');
/**
 * get listProductRents
 * Summary: List of Product Rents
 * Notes: get list of Product Rents
 * Output-Formats: [application/json]
 */
$app->get('/productRents', 'ProductRentsApi@listProductRents');
/**
 * patch updateProductRent
 * Summary: Updates a Product Rent
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/productRents', 'ProductRentsApi@updateProductRent');
/**
 * get listProductRentsByCompanyId
 * Summary: List of products rent by company id
 * Notes: get list of Products rent by company id
 * Output-Formats: [application/json]
 */
$app->get('/productRents/company/{companyId}', 'ProductRentsApi@listProductRentsByCompanyId');
/**
 * delete deleteProductRent
 * Summary: Delete a Product Rent
 * Notes: Delete a Product Rent
 * Output-Formats: [application/json]
 */
$app->delete('/productRents/{productRentId}', 'ProductRentsApi@deleteProductRent');
/**
 * get getProductRentById
 * Summary: Find product rent by ID
 * Notes: Returns a single Product Rent
 * Output-Formats: [application/json]
 */
$app->get('/productRents/{productRentId}', 'ProductRentsApi@getProductRentById');
/**
 * post createProductStatus
 * Summary: Create Status
 * Notes: Create ProductStatus
 * Output-Formats: [application/json]
 */
$app->post('/productStatus', 'ProductStatusApi@createProductStatus');
/**
 * get listProductStatus
 * Summary: List of Product Status
 * Notes: get list of Product Status
 * Output-Formats: [application/json]
 */
$app->get('/productStatus', 'ProductStatusApi@listProductStatus');
/**
 * patch updateProductStatus
 * Summary: Updates a product status
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/productStatus', 'ProductStatusApi@updateProductStatus');
/**
 * delete deleteProductStatus
 * Summary: Delete a Product Status
 * Notes: Delete a Product Status
 * Output-Formats: [application/json]
 */
$app->delete('/productStatus/{productStatusId}', 'ProductStatusApi@deleteProductStatus');
/**
 * get getProductStatusById
 * Summary: Find stauts by ID
 * Notes: Returns a single product status
 * Output-Formats: [application/json]
 */
$app->get('/productStatus/{productStatusId}', 'ProductStatusApi@getProductStatusById');
/**
 * post createProductType
 * Summary: Create Product Types
 * Notes: Create Product Types
 * Output-Formats: [application/json]
 */
$app->post('/productTypes', 'ProductTypesApi@createProductType');
/**
 * get listProductTypes
 * Summary: List of Product Types
 * Notes: get list of Product Types
 * Output-Formats: [application/json]
 */
$app->get('/productTypes', 'ProductTypesApi@listProductTypes');
/**
 * patch updateProductType
 * Summary: Updates a Product Type
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/productTypes', 'ProductTypesApi@updateProductType');
/**
 * delete deleteProductType
 * Summary: Delete a Product Type
 * Notes: Delete a Product Type
 * Output-Formats: [application/json]
 */
$app->delete('/productTypes/{productTypeId}', 'ProductTypesApi@deleteProductType');
/**
 * get getProductTypeById
 * Summary: Find product type by ID
 * Notes: Returns a single Product Type
 * Output-Formats: [application/json]
 */
$app->get('/productTypes/{productTypeId}', 'ProductTypesApi@getProductTypeById');
/**
 * post createProduct
 * Summary: Create Product
 * Notes: Create Product
 * Output-Formats: [application/json]
 */
$app->post('/products', 'ProductsApi@createProduct');
/**
 * get listProducts
 * Summary: List of Products
 * Notes: get list of Products
 * Output-Formats: [application/json]
 */
$app->get('/products', 'ProductsApi@listProducts');
/**
 * patch updateProduct
 * Summary: Updates a Product
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/products', 'ProductsApi@updateProduct');
/**
 * get listProductsByCompanyId
 * Summary: List of products by company id
 * Notes: get list of Products by company id
 * Output-Formats: [application/json]
 */
$app->get('/products/company/{companyId}', 'ProductsApi@listProductsByCompanyId');
/**
 * delete deleteProduct
 * Summary: Delete a Product
 * Notes: Delete a Product
 * Output-Formats: [application/json]
 */
$app->delete('/products/{productId}', 'ProductsApi@deleteProduct');
/**
 * get getProductById
 * Summary: Find Product by ID
 * Notes: Returns a single Product
 * Output-Formats: [application/json]
 */
$app->get('/products/{productId}', 'ProductsApi@getProductById');
/**
 * post createRole
 * Summary: Create Role
 * Notes: Create Role
 * Output-Formats: [application/json]
 */
$app->post('/roles', 'RolesApi@createRole');
/**
 * get listRoles
 * Summary: List of roles
 * Notes: get list of roles
 * Output-Formats: [application/json]
 */
$app->get('/roles', 'RolesApi@listRoles');
/**
 * patch updateRole
 * Summary: Updates a role
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/roles', 'RolesApi@updateRole');
/**
 * delete deleteRole
 * Summary: Deletes a role
 * Notes: Deletes a role
 * Output-Formats: [application/json]
 */
$app->delete('/roles/{roleId}', 'RolesApi@deleteRole');
/**
 * get getRoleById
 * Summary: Find role by ID
 * Notes: Returns a single role
 * Output-Formats: [application/json]
 */
$app->get('/roles/{roleId}', 'RolesApi@getRoleById');
/**
 * post createSite
 * Summary: Create Site
 * Notes: Create Sites
 * Output-Formats: [application/json]
 */
$app->post('/sites', 'SitesApi@createSite');
/**
 * get listSites
 * Summary: List of Sites
 * Notes: get list of Sites
 * Output-Formats: [application/json]
 */
$app->get('/sites', 'SitesApi@listSites');
/**
 * patch updateSite
 * Summary: Updates a Site
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/sites', 'SitesApi@updateSite');
/**
 * get listSitesByCompanyId
 * Summary: List of sites by company id
 * Notes: get list of sites by company id
 * Output-Formats: [application/json]
 */
$app->get('/sites/company/{companyId}', 'SitesApi@listSitesByCompanyId');
/**
 * delete deleteSite
 * Summary: Delete a Site
 * Notes: Delete a Site
 * Output-Formats: [application/json]
 */
$app->delete('/sites/{siteId}', 'SitesApi@deleteSite');
/**
 * get getSiteById
 * Summary: Find Site by ID
 * Notes: Returns a single Site
 * Output-Formats: [application/json]
 */
$app->get('/sites/{siteId}', 'SitesApi@getSiteById');
/**
 * post createStatus
 * Summary: Create Status
 * Notes: Create Status
 * Output-Formats: [application/json]
 */
$app->post('/status', 'StatusApi@createStatus');
/**
 * get listStatus
 * Summary: List of Status
 * Notes: get list of Status
 * Output-Formats: [application/json]
 */
$app->get('/status', 'StatusApi@listStatus');
/**
 * patch updateStatus
 * Summary: Updates a status
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/status', 'StatusApi@updateStatus');
/**
 * delete deleteStatus
 * Summary: Delete a Status
 * Notes: Delete a Status
 * Output-Formats: [application/json]
 */
$app->delete('/status/{statusId}', 'StatusApi@deleteStatus');
/**
 * get getStatusById
 * Summary: Find status by ID
 * Notes: Returns a single status
 * Output-Formats: [application/json]
 */
$app->get('/status/{statusId}', 'StatusApi@getStatusById');
/**
 * post createStorage
 * Summary: Create Storage
 * Notes: Create Storage
 * Output-Formats: [application/json]
 */
$app->post('/storages', 'StoragesApi@createStorage');
/**
 * get listStorage
 * Summary: List of Storages
 * Notes: get list of Storages
 * Output-Formats: [application/json]
 */
$app->get('/storages', 'StoragesApi@listStorage');
/**
 * patch updateStorage
 * Summary: Updates a Storage
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/storages', 'StoragesApi@updateStorage');
/**
 * get listStoragesByCompanyId
 * Summary: List of storages by company id
 * Notes: get list of storages by company id
 * Output-Formats: [application/json]
 */
$app->get('/storages/company/{companyId}', 'StoragesApi@listStoragesByCompanyId');
/**
 * delete deleteStorage
 * Summary: Delete a Storage
 * Notes: Delete a Storage
 * Output-Formats: [application/json]
 */
$app->delete('/storages/{storageId}', 'StoragesApi@deleteStorage');
/**
 * get getStorageById
 * Summary: Find Storage by ID
 * Notes: Returns a single Storage
 * Output-Formats: [application/json]
 */
$app->get('/storages/{storageId}', 'StoragesApi@getStorageById');
/**
 * post createUnit
 * Summary: Create Unit
 * Notes: Create Unit
 * Output-Formats: [application/json]
 */
$app->post('/units', 'UnitsApi@createUnit');
/**
 * get listUnits
 * Summary: List of Units
 * Notes: get list of Units
 * Output-Formats: [application/json]
 */
$app->get('/units', 'UnitsApi@listUnits');
/**
 * patch updateUnit
 * Summary: Update a Unit
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/units', 'UnitsApi@updateUnit');
/**
 * delete deleteUnit
 * Summary: Delete a Unit
 * Notes: Delete a Unit
 * Output-Formats: [application/json]
 */
$app->delete('/units/{unitId}', 'UnitsApi@deleteUnit');
/**
 * get getUnitById
 * Summary: Find unit by ID
 * Notes: Returns a single Unit
 * Output-Formats: [application/json]
 */
$app->get('/units/{unitId}', 'UnitsApi@getUnitById');
/**
 * post createUser
 * Summary: Create User
 * Notes: Create User
 * Output-Formats: [application/json]
 */
$app->post('/users', 'UsersApi@createUser');
/**
 * get listUsers
 * Summary: List of Users
 * Notes: get list of Users
 * Output-Formats: [application/json]
 */
$app->get('/users', 'UsersApi@listUsers');
/**
 * delete deleteUser
 * Summary: Delete a User
 * Notes: Delete a User
 * Output-Formats: [application/json]
 */
$app->delete('/users/{userId}', 'UsersApi@deleteUser');
/**
 * get getUserById
 * Summary: Find User by ID
 * Notes: Returns a single User
 * Output-Formats: [application/json]
 */
$app->get('/users/{userId}', 'UsersApi@getUserById');
/**
 * patch updateUser
 * Summary: Updates a User
 * Notes:
 * Output-Formats: [application/json]
 */
$app->patch('/users/{userId}', 'UsersApi@updateUser');
/**
 * patch changePasswordOfUser
 * Summary: change password of User
 * Notes: change password of User
 * Output-Formats: [application/json]
 */
$app->patch('/users/{userId}/changepassword', 'UsersApi@changePasswordOfUser');
