<?php

/**
 * GEOSERVER API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class StoragesApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation createStorage
     *
     * Create Storage.
     *
     *
     * @return Http response
     */
    public function createStorage()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $body = $input['body'];


        return response('How about implementing createStorage as a post method ?');
    }
    /**
     * Operation listStorage
     *
     * List of Storages.
     *
     *
     * @return Http response
     */
    public function listStorage()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listStorage as a get method ?');
    }
    /**
     * Operation updateStorage
     *
     * Updates a Storage.
     *
     *
     * @return Http response
     */
    public function updateStorage()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $body = $input['body'];


        return response('How about implementing updateStorage as a patch method ?');
    }
    /**
     * Operation listStoragesByCompanyId
     *
     * List of storages by company id.
     *
     * @param int $company_id ID of company to return (required)
     *
     * @return Http response
     */
    public function listStoragesByCompanyId($company_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listStoragesByCompanyId as a get method ?');
    }
    /**
     * Operation deleteStorage
     *
     * Delete a Storage.
     *
     * @param int $storage_id storage Id to delete (required)
     *
     * @return Http response
     */
    public function deleteStorage($storage_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteStorage as a delete method ?');
    }
    /**
     * Operation getStorageById
     *
     * Find Storage by ID.
     *
     * @param int $storage_id ID of Storage to return (required)
     *
     * @return Http response
     */
    public function getStorageById($storage_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getStorageById as a get method ?');
    }
}
