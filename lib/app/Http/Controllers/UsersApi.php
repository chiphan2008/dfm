<?php

/**
 * GEOSERVER API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class UsersApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation createUser
     *
     * Create User.
     *
     *
     * @return Http response
     */
    public function createUser()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $body = $input['body'];


        return response('How about implementing createUser as a post method ?');
    }
    /**
     * Operation listUsers
     *
     * List of Users.
     *
     *
     * @return Http response
     */
    public function listUsers()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listUsers as a get method ?');
    }
    /**
     * Operation deleteUser
     *
     * Delete a User.
     *
     * @param int $user_id user Id to delete (required)
     *
     * @return Http response
     */
    public function deleteUser($user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing deleteUser as a delete method ?');
    }
    /**
     * Operation getUserById
     *
     * Find User by ID.
     *
     * @param int $user_id ID of User to return (required)
     *
     * @return Http response
     */
    public function getUserById($user_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUserById as a get method ?');
    }
    /**
     * Operation updateUser
     *
     * Updates a User.
     *
     * @param int $user_id ID of user that needs to be user (required)
     *
     * @return Http response
     */
    public function updateUser($user_id)
    {
        $input = Request::all();

        //path params validation
        if ($user_id < 1) {
            throw new \InvalidArgumentException('invalid value for $user_id when calling UsersApi.updateUser, must be bigger than or equal to 1.');
        }


        //not path params validation

        return response('How about implementing updateUser as a patch method ?');
    }
    /**
     * Operation changePasswordOfUser
     *
     * change password of User.
     *
     * @param int $user_id ID of user that needs to be user (required)
     *
     * @return Http response
     */
    public function changePasswordOfUser($user_id)
    {
        $input = Request::all();

        //path params validation
        if ($user_id < 1) {
            throw new \InvalidArgumentException('invalid value for $user_id when calling UsersApi.changePasswordOfUser, must be bigger than or equal to 1.');
        }


        //not path params validation

        return response('How about implementing changePasswordOfUser as a patch method ?');
    }
}
