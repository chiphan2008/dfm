<?php

/**
 * GEOSERVER API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class DeviceDataApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation createDeviceData
     *
     * Create Device Data.
     *
     *
     * @return Http response
     */
    public function createDeviceData()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['body'])) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createDeviceData');
        }
        $body = $input['body'];


        return response('How about implementing createDeviceData as a post method ?');
    }
    /**
     * Operation listDeviceData
     *
     * List of device data.
     *
     *
     * @return Http response
     */
    public function listDeviceData()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listDeviceData as a get method ?');
    }
    /**
     * Operation updateDeviceData
     *
     * Updates a Device Data.
     *
     *
     * @return Http response
     */
    public function updateDeviceData()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        $body = $input['body'];


        return response('How about implementing updateDeviceData as a patch method ?');
    }
    /**
     * Operation listDeviceDataByDeviceId
     *
     * List of device data by device id.
     *
     * @param int $device_id ID of device to return (required)
     *
     * @return Http response
     */
    public function listDeviceDataByDeviceId($device_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing listDeviceDataByDeviceId as a get method ?');
    }
    /**
     * Operation deleteDeviceData
     *
     * Delete a Device Data.
     *
     * @param int $device_data_id device Data Id to delete (required)
     *
     * @return Http response
     */
    public function deleteDeviceData($device_data_id)
    {
        $input = Request::all();

        //path params validation
        if ($device_data_id < 1) {
            throw new \InvalidArgumentException('invalid value for $device_data_id when calling DeviceDataApi.deleteDeviceData, must be bigger than or equal to 1.');
        }


        //not path params validation

        return response('How about implementing deleteDeviceData as a delete method ?');
    }
    /**
     * Operation getDeviceDataById
     *
     * Find Device Data by ID.
     *
     * @param int $device_data_id ID of device to return (required)
     *
     * @return Http response
     */
    public function getDeviceDataById($device_data_id)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getDeviceDataById as a get method ?');
    }
}
