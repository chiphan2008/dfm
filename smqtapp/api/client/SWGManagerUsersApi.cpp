/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGManagerUsersApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGManagerUsersApi::SWGManagerUsersApi() {}

SWGManagerUsersApi::~SWGManagerUsersApi() {}

SWGManagerUsersApi::SWGManagerUsersApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGManagerUsersApi::managerCreateUser(ModelUserCreate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/users");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerUsersApi::managerCreateUserCallback);

    worker->execute(&input);
}

void
SWGManagerUsersApi::managerCreateUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelUser* output = static_cast<ModelUser*>(create(json, QString("ModelUser")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerCreateUserSignal(output);
    } else {
        emit managerCreateUserSignalE(output, error_type, error_str);
        emit managerCreateUserSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerUsersApi::managerDeleteUser(qint64 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/users/{userId}");

    QString user_idPathParam("{"); user_idPathParam.append("userId").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerUsersApi::managerDeleteUserCallback);

    worker->execute(&input);
}

void
SWGManagerUsersApi::managerDeleteUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerDeleteUserSignal();
    } else {
        emit managerDeleteUserSignalE(error_type, error_str);
        emit managerDeleteUserSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerUsersApi::managerGetUser(qint32 user_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/users/{userId}");

    QString user_idPathParam("{"); user_idPathParam.append("userId").append("}");
    fullPath.replace(user_idPathParam, stringValue(user_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerUsersApi::managerGetUserCallback);

    worker->execute(&input);
}

void
SWGManagerUsersApi::managerGetUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelUser* output = static_cast<ModelUser*>(create(json, QString("ModelUser")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerGetUserSignal(output);
    } else {
        emit managerGetUserSignalE(output, error_type, error_str);
        emit managerGetUserSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerUsersApi::managerListUsers(qint32 page, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/users");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerUsersApi::managerListUsersCallback);

    worker->execute(&input);
}

void
SWGManagerUsersApi::managerListUsersCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelUser*>* output = new QList<ModelUser*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelUser* o = new ModelUser();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerListUsersSignal(output);
    } else {
        emit managerListUsersSignalE(output, error_type, error_str);
        emit managerListUsersSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerUsersApi::managerSearchUser(ModelUserSearch body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/users/search");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerUsersApi::managerSearchUserCallback);

    worker->execute(&input);
}

void
SWGManagerUsersApi::managerSearchUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelUser* output = static_cast<ModelUser*>(create(json, QString("ModelUser")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerSearchUserSignal(output);
    } else {
        emit managerSearchUserSignalE(output, error_type, error_str);
        emit managerSearchUserSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerUsersApi::managerUpdateUser(ModelUserUpdate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/users");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerUsersApi::managerUpdateUserCallback);

    worker->execute(&input);
}

void
SWGManagerUsersApi::managerUpdateUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelUser* output = static_cast<ModelUser*>(create(json, QString("ModelUser")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerUpdateUserSignal(output);
    } else {
        emit managerUpdateUserSignalE(output, error_type, error_str);
        emit managerUpdateUserSignalEFull(worker, error_type, error_str);
    }
}


}
