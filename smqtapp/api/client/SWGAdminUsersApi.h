/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGAdminUsersApi_H_
#define _SWG_SWGAdminUsersApi_H_

#include "SWGHttpRequest.h"

#include "ModelChangePasswordUser.h"
#include "ModelUser.h"
#include "ModelUserCreate.h"
#include "ModelUserUpdate.h"

#include <QObject>

namespace api {

class SWGAdminUsersApi: public QObject {
    Q_OBJECT

public:
    SWGAdminUsersApi();
    SWGAdminUsersApi(QString host, QString basePath);
    ~SWGAdminUsersApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void changePasswordOfUser(qint64 user_id, ModelChangePasswordUser body);
    void createUser(ModelUserCreate body);
    void deleteUser(qint64 user_id);
    void getUser(qint32 user_id);
    void listUsers(qint32 page, qint32 limit);
    void updateUser(ModelUserUpdate body);
    
private:
    void changePasswordOfUserCallback (HttpRequestWorker * worker);
    void createUserCallback (HttpRequestWorker * worker);
    void deleteUserCallback (HttpRequestWorker * worker);
    void getUserCallback (HttpRequestWorker * worker);
    void listUsersCallback (HttpRequestWorker * worker);
    void updateUserCallback (HttpRequestWorker * worker);
    
signals:
    void changePasswordOfUserSignal();
    void createUserSignal(ModelUser* summary);
    void deleteUserSignal();
    void getUserSignal(ModelUser* summary);
    void listUsersSignal(QList<ModelUser*>* summary);
    void updateUserSignal(ModelUser* summary);
    
    void changePasswordOfUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void createUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void listUsersSignalE(QList<ModelUser*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void changePasswordOfUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void listUsersSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
