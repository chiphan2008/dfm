/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "ModelDeviceForm.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace api {

ModelDeviceForm::ModelDeviceForm(QString* json) {
    init();
    this->fromJson(*json);
}

ModelDeviceForm::ModelDeviceForm() {
    init();
}

ModelDeviceForm::~ModelDeviceForm() {
    this->cleanup();
}

void
ModelDeviceForm::init() {
    id = 0L;
    device_model_id = 0L;
    identity = new QString("");
    is_running = 0;
    version = 0L;
    lat = 0.0f;
    lng = 0.0f;
}

void
ModelDeviceForm::cleanup() {


    if(identity != nullptr) {
        delete identity;
    }




}

ModelDeviceForm*
ModelDeviceForm::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
ModelDeviceForm::fromJsonObject(QJsonObject &pJson) {
    ::api::setValue(&id, pJson["id"], "qint64", "");
    ::api::setValue(&device_model_id, pJson["device_model_id"], "qint64", "");
    ::api::setValue(&identity, pJson["identity"], "QString", "QString");
    ::api::setValue(&is_running, pJson["is_running"], "qint32", "");
    ::api::setValue(&version, pJson["version"], "qint64", "");
    ::api::setValue(&lat, pJson["lat"], "float", "");
    ::api::setValue(&lng, pJson["lng"], "float", "");
}

QString
ModelDeviceForm::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
ModelDeviceForm::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("id", QJsonValue(id));
    obj->insert("device_model_id", QJsonValue(device_model_id));
    toJsonValue(QString("identity"), identity, obj, QString("QString"));
    obj->insert("is_running", QJsonValue(is_running));
    obj->insert("version", QJsonValue(version));
    obj->insert("lat", QJsonValue(lat));
    obj->insert("lng", QJsonValue(lng));

    return obj;
}

qint64
ModelDeviceForm::getId() {
    return id;
}
void
ModelDeviceForm::setId(qint64 id) {
    this->id = id;
}

qint64
ModelDeviceForm::getDeviceModelId() {
    return device_model_id;
}
void
ModelDeviceForm::setDeviceModelId(qint64 device_model_id) {
    this->device_model_id = device_model_id;
}

QString*
ModelDeviceForm::getIdentity() {
    return identity;
}
void
ModelDeviceForm::setIdentity(QString* identity) {
    this->identity = identity;
}

qint32
ModelDeviceForm::getIsRunning() {
    return is_running;
}
void
ModelDeviceForm::setIsRunning(qint32 is_running) {
    this->is_running = is_running;
}

qint64
ModelDeviceForm::getVersion() {
    return version;
}
void
ModelDeviceForm::setVersion(qint64 version) {
    this->version = version;
}

float
ModelDeviceForm::getLat() {
    return lat;
}
void
ModelDeviceForm::setLat(float lat) {
    this->lat = lat;
}

float
ModelDeviceForm::getLng() {
    return lng;
}
void
ModelDeviceForm::setLng(float lng) {
    this->lng = lng;
}


}

