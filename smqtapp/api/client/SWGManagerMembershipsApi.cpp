/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGManagerMembershipsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGManagerMembershipsApi::SWGManagerMembershipsApi() {}

SWGManagerMembershipsApi::~SWGManagerMembershipsApi() {}

SWGManagerMembershipsApi::SWGManagerMembershipsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGManagerMembershipsApi::managerDeleteMembership(qint64 membership_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/memberships/{membershipId}");

    QString membership_idPathParam("{"); membership_idPathParam.append("membershipId").append("}");
    fullPath.replace(membership_idPathParam, stringValue(membership_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerMembershipsApi::managerDeleteMembershipCallback);

    worker->execute(&input);
}

void
SWGManagerMembershipsApi::managerDeleteMembershipCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerDeleteMembershipSignal();
    } else {
        emit managerDeleteMembershipSignalE(error_type, error_str);
        emit managerDeleteMembershipSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerMembershipsApi::managerGetMembershipById(qint64 membership_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/memberships/{membershipId}");

    QString membership_idPathParam("{"); membership_idPathParam.append("membershipId").append("}");
    fullPath.replace(membership_idPathParam, stringValue(membership_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerMembershipsApi::managerGetMembershipByIdCallback);

    worker->execute(&input);
}

void
SWGManagerMembershipsApi::managerGetMembershipByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelMembership* output = static_cast<ModelMembership*>(create(json, QString("ModelMembership")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerGetMembershipByIdSignal(output);
    } else {
        emit managerGetMembershipByIdSignalE(output, error_type, error_str);
        emit managerGetMembershipByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerMembershipsApi::managerUpdateMembership(ModelMembershipForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/memberships");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerMembershipsApi::managerUpdateMembershipCallback);

    worker->execute(&input);
}

void
SWGManagerMembershipsApi::managerUpdateMembershipCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelMembership* output = static_cast<ModelMembership*>(create(json, QString("ModelMembership")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerUpdateMembershipSignal(output);
    } else {
        emit managerUpdateMembershipSignalE(output, error_type, error_str);
        emit managerUpdateMembershipSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerMembershipsApi::managerlistMemberships() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/memberships");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerMembershipsApi::managerlistMembershipsCallback);

    worker->execute(&input);
}

void
SWGManagerMembershipsApi::managerlistMembershipsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelMembership*>* output = new QList<ModelMembership*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelMembership* o = new ModelMembership();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerlistMembershipsSignal(output);
    } else {
        emit managerlistMembershipsSignalE(output, error_type, error_str);
        emit managerlistMembershipsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerMembershipsApi::manmagerCreateMembership(ModelMembershipForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/memberships");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerMembershipsApi::manmagerCreateMembershipCallback);

    worker->execute(&input);
}

void
SWGManagerMembershipsApi::manmagerCreateMembershipCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelMembership* output = static_cast<ModelMembership*>(create(json, QString("ModelMembership")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit manmagerCreateMembershipSignal(output);
    } else {
        emit manmagerCreateMembershipSignalE(output, error_type, error_str);
        emit manmagerCreateMembershipSignalEFull(worker, error_type, error_str);
    }
}


}
