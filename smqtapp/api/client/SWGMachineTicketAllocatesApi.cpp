/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGMachineTicketAllocatesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGMachineTicketAllocatesApi::SWGMachineTicketAllocatesApi() {}

SWGMachineTicketAllocatesApi::~SWGMachineTicketAllocatesApi() {}

SWGMachineTicketAllocatesApi::SWGMachineTicketAllocatesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGMachineTicketAllocatesApi::machineTicketAllocates(QList<qint32>* body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/machine/ticketAllocates/update");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QJsonArray* bodyArray = new QJsonArray();
    toJsonArray((QList<void*>*)body, bodyArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*bodyArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMachineTicketAllocatesApi::machineTicketAllocatesCallback);

    worker->execute(&input);
}

void
SWGMachineTicketAllocatesApi::machineTicketAllocatesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelTicketAllocate*>* output = new QList<ModelTicketAllocate*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelTicketAllocate* o = new ModelTicketAllocate();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit machineTicketAllocatesSignal(output);
    } else {
        emit machineTicketAllocatesSignalE(output, error_type, error_str);
        emit machineTicketAllocatesSignalEFull(worker, error_type, error_str);
    }
}


}
