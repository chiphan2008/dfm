/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "ModelRfidCardUpdate.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace api {

ModelRfidCardUpdate::ModelRfidCardUpdate(QString* json) {
    init();
    this->fromJson(*json);
}

ModelRfidCardUpdate::ModelRfidCardUpdate() {
    init();
}

ModelRfidCardUpdate::~ModelRfidCardUpdate() {
    this->cleanup();
}

void
ModelRfidCardUpdate::init() {
    id = 0L;
    rfid = new QString("");
    barcode = new QString("");
    usage_type = new QString("");
    target_id = 0L;
}

void
ModelRfidCardUpdate::cleanup() {

    if(rfid != nullptr) {
        delete rfid;
    }
    if(barcode != nullptr) {
        delete barcode;
    }
    if(usage_type != nullptr) {
        delete usage_type;
    }

}

ModelRfidCardUpdate*
ModelRfidCardUpdate::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
ModelRfidCardUpdate::fromJsonObject(QJsonObject &pJson) {
    ::api::setValue(&id, pJson["id"], "qint64", "");
    ::api::setValue(&rfid, pJson["rfid"], "QString", "QString");
    ::api::setValue(&barcode, pJson["barcode"], "QString", "QString");
    ::api::setValue(&usage_type, pJson["usage_type"], "QString", "QString");
    ::api::setValue(&target_id, pJson["target_id"], "qint64", "");
}

QString
ModelRfidCardUpdate::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
ModelRfidCardUpdate::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("id", QJsonValue(id));
    toJsonValue(QString("rfid"), rfid, obj, QString("QString"));
    toJsonValue(QString("barcode"), barcode, obj, QString("QString"));
    toJsonValue(QString("usage_type"), usage_type, obj, QString("QString"));
    obj->insert("target_id", QJsonValue(target_id));

    return obj;
}

qint64
ModelRfidCardUpdate::getId() {
    return id;
}
void
ModelRfidCardUpdate::setId(qint64 id) {
    this->id = id;
}

QString*
ModelRfidCardUpdate::getRfid() {
    return rfid;
}
void
ModelRfidCardUpdate::setRfid(QString* rfid) {
    this->rfid = rfid;
}

QString*
ModelRfidCardUpdate::getBarcode() {
    return barcode;
}
void
ModelRfidCardUpdate::setBarcode(QString* barcode) {
    this->barcode = barcode;
}

QString*
ModelRfidCardUpdate::getUsageType() {
    return usage_type;
}
void
ModelRfidCardUpdate::setUsageType(QString* usage_type) {
    this->usage_type = usage_type;
}

qint64
ModelRfidCardUpdate::getTargetId() {
    return target_id;
}
void
ModelRfidCardUpdate::setTargetId(qint64 target_id) {
    this->target_id = target_id;
}


}

