/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAdminRolesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGAdminRolesApi::SWGAdminRolesApi() {}

SWGAdminRolesApi::~SWGAdminRolesApi() {}

SWGAdminRolesApi::SWGAdminRolesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAdminRolesApi::assignPermissionToRoleId(qint64 role_id, QList<qint32>* body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles/{roleId}");

    QString role_idPathParam("{"); role_idPathParam.append("roleId").append("}");
    fullPath.replace(role_idPathParam, stringValue(role_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QJsonArray* bodyArray = new QJsonArray();
    toJsonArray((QList<void*>*)body, bodyArray, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(*bodyArray);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);



    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::assignPermissionToRoleIdCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::assignPermissionToRoleIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit assignPermissionToRoleIdSignal();
    } else {
        emit assignPermissionToRoleIdSignalE(error_type, error_str);
        emit assignPermissionToRoleIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminRolesApi::createRole(ModelRoleForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::createRoleCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::createRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRole* output = static_cast<ModelRole*>(create(json, QString("ModelRole")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createRoleSignal(output);
    } else {
        emit createRoleSignalE(output, error_type, error_str);
        emit createRoleSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminRolesApi::deleteRole(qint64 role_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles/{roleId}");

    QString role_idPathParam("{"); role_idPathParam.append("roleId").append("}");
    fullPath.replace(role_idPathParam, stringValue(role_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::deleteRoleCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::deleteRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteRoleSignal();
    } else {
        emit deleteRoleSignalE(error_type, error_str);
        emit deleteRoleSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminRolesApi::getPermissionsByRoleId(qint64 role_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles/{roleId}/permissions");

    QString role_idPathParam("{"); role_idPathParam.append("roleId").append("}");
    fullPath.replace(role_idPathParam, stringValue(role_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::getPermissionsByRoleIdCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::getPermissionsByRoleIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelPermission*>* output = new QList<ModelPermission*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelPermission* o = new ModelPermission();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getPermissionsByRoleIdSignal(output);
    } else {
        emit getPermissionsByRoleIdSignalE(output, error_type, error_str);
        emit getPermissionsByRoleIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminRolesApi::getRoleById(qint64 role_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles/{roleId}");

    QString role_idPathParam("{"); role_idPathParam.append("roleId").append("}");
    fullPath.replace(role_idPathParam, stringValue(role_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::getRoleByIdCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::getRoleByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRole* output = static_cast<ModelRole*>(create(json, QString("ModelRole")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getRoleByIdSignal(output);
    } else {
        emit getRoleByIdSignalE(output, error_type, error_str);
        emit getRoleByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminRolesApi::listRoles() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::listRolesCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::listRolesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelRole*>* output = new QList<ModelRole*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelRole* o = new ModelRole();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listRolesSignal(output);
    } else {
        emit listRolesSignalE(output, error_type, error_str);
        emit listRolesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminRolesApi::updateRole(ModelRoleForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/roles");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminRolesApi::updateRoleCallback);

    worker->execute(&input);
}

void
SWGAdminRolesApi::updateRoleCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRole* output = static_cast<ModelRole*>(create(json, QString("ModelRole")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateRoleSignal(output);
    } else {
        emit updateRoleSignalE(output, error_type, error_str);
        emit updateRoleSignalEFull(worker, error_type, error_str);
    }
}


}
