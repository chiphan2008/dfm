/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGMachineShiftsApi_H_
#define _SWG_SWGMachineShiftsApi_H_

#include "SWGHttpRequest.h"

#include "ModelGenericResponse.h"
#include "ModelMachineLogin.h"
#include "ModelMachineLoginView.h"

#include <QObject>

namespace api {

class SWGMachineShiftsApi: public QObject {
    Q_OBJECT

public:
    SWGMachineShiftsApi();
    SWGMachineShiftsApi(QString host, QString basePath);
    ~SWGMachineShiftsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void machineLogin(ModelMachineLogin body);
    void machineLogout();
    void machineUpdateRfidVehicle(ModelMachineLogin body);
    
private:
    void machineLoginCallback (HttpRequestWorker * worker);
    void machineLogoutCallback (HttpRequestWorker * worker);
    void machineUpdateRfidVehicleCallback (HttpRequestWorker * worker);
    
signals:
    void machineLoginSignal(ModelMachineLoginView* summary);
    void machineLogoutSignal(ModelGenericResponse* summary);
    void machineUpdateRfidVehicleSignal(ModelMachineLoginView* summary);
    
    void machineLoginSignalE(ModelMachineLoginView* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void machineLogoutSignalE(ModelGenericResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void machineUpdateRfidVehicleSignalE(ModelMachineLoginView* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void machineLoginSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void machineLogoutSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void machineUpdateRfidVehicleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
