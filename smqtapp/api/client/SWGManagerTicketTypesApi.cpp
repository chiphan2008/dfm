/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGManagerTicketTypesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGManagerTicketTypesApi::SWGManagerTicketTypesApi() {}

SWGManagerTicketTypesApi::~SWGManagerTicketTypesApi() {}

SWGManagerTicketTypesApi::SWGManagerTicketTypesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGManagerTicketTypesApi::managerCreateTicketType(ModelTicketTypeForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/ticketTypes");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerTicketTypesApi::managerCreateTicketTypeCallback);

    worker->execute(&input);
}

void
SWGManagerTicketTypesApi::managerCreateTicketTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelTicketType* output = static_cast<ModelTicketType*>(create(json, QString("ModelTicketType")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerCreateTicketTypeSignal(output);
    } else {
        emit managerCreateTicketTypeSignalE(output, error_type, error_str);
        emit managerCreateTicketTypeSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerTicketTypesApi::managerDeleteticketType(qint64 ticket_type_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/ticketTypes/{ticketTypeId}");

    QString ticket_type_idPathParam("{"); ticket_type_idPathParam.append("ticketTypeId").append("}");
    fullPath.replace(ticket_type_idPathParam, stringValue(ticket_type_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerTicketTypesApi::managerDeleteticketTypeCallback);

    worker->execute(&input);
}

void
SWGManagerTicketTypesApi::managerDeleteticketTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerDeleteticketTypeSignal();
    } else {
        emit managerDeleteticketTypeSignalE(error_type, error_str);
        emit managerDeleteticketTypeSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerTicketTypesApi::managerGetTicketTypeById(qint64 ticket_type_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/ticketTypes/{ticketTypeId}");

    QString ticket_type_idPathParam("{"); ticket_type_idPathParam.append("ticketTypeId").append("}");
    fullPath.replace(ticket_type_idPathParam, stringValue(ticket_type_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerTicketTypesApi::managerGetTicketTypeByIdCallback);

    worker->execute(&input);
}

void
SWGManagerTicketTypesApi::managerGetTicketTypeByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelTicketType* output = static_cast<ModelTicketType*>(create(json, QString("ModelTicketType")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerGetTicketTypeByIdSignal(output);
    } else {
        emit managerGetTicketTypeByIdSignalE(output, error_type, error_str);
        emit managerGetTicketTypeByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerTicketTypesApi::managerUpdateTicketType(ModelTicketTypeForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/ticketTypes");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerTicketTypesApi::managerUpdateTicketTypeCallback);

    worker->execute(&input);
}

void
SWGManagerTicketTypesApi::managerUpdateTicketTypeCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelTicketType* output = static_cast<ModelTicketType*>(create(json, QString("ModelTicketType")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerUpdateTicketTypeSignal(output);
    } else {
        emit managerUpdateTicketTypeSignalE(output, error_type, error_str);
        emit managerUpdateTicketTypeSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerTicketTypesApi::managerlistTicketTypes(qint32 page, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/ticketTypes");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerTicketTypesApi::managerlistTicketTypesCallback);

    worker->execute(&input);
}

void
SWGManagerTicketTypesApi::managerlistTicketTypesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelTicketType*>* output = new QList<ModelTicketType*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelTicketType* o = new ModelTicketType();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerlistTicketTypesSignal(output);
    } else {
        emit managerlistTicketTypesSignalE(output, error_type, error_str);
        emit managerlistTicketTypesSignalEFull(worker, error_type, error_str);
    }
}


}
