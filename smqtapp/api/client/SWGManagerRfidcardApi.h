/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerRfidcardApi_H_
#define _SWG_SWGManagerRfidcardApi_H_

#include "SWGHttpRequest.h"

#include "ModelRfidCard.h"
#include "ModelRfidCardCreate.h"
#include "ModelRfidCardUpdate.h"

#include <QObject>

namespace api {

class SWGManagerRfidcardApi: public QObject {
    Q_OBJECT

public:
    SWGManagerRfidcardApi();
    SWGManagerRfidcardApi(QString host, QString basePath);
    ~SWGManagerRfidcardApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerCreateRfidcard(ModelRfidCardCreate body);
    void managerDeleteRfidcard(qint64 rfidcard_id);
    void managerGetRfidcardById(qint64 rfidcard_id);
    void managerSearchRfidcard(ModelRfidCardCreate body);
    void managerUpdateRfidcard(ModelRfidCardUpdate body);
    void managerlistRfidcards();
    
private:
    void managerCreateRfidcardCallback (HttpRequestWorker * worker);
    void managerDeleteRfidcardCallback (HttpRequestWorker * worker);
    void managerGetRfidcardByIdCallback (HttpRequestWorker * worker);
    void managerSearchRfidcardCallback (HttpRequestWorker * worker);
    void managerUpdateRfidcardCallback (HttpRequestWorker * worker);
    void managerlistRfidcardsCallback (HttpRequestWorker * worker);
    
signals:
    void managerCreateRfidcardSignal(ModelRfidCard* summary);
    void managerDeleteRfidcardSignal();
    void managerGetRfidcardByIdSignal(ModelRfidCard* summary);
    void managerSearchRfidcardSignal(ModelRfidCard* summary);
    void managerUpdateRfidcardSignal(ModelRfidCard* summary);
    void managerlistRfidcardsSignal(QList<ModelRfidCard*>* summary);
    
    void managerCreateRfidcardSignalE(ModelRfidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteRfidcardSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetRfidcardByIdSignalE(ModelRfidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerSearchRfidcardSignalE(ModelRfidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateRfidcardSignalE(ModelRfidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistRfidcardsSignalE(QList<ModelRfidCard*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerCreateRfidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteRfidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetRfidcardByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerSearchRfidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateRfidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistRfidcardsSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
