/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerUsersApi_H_
#define _SWG_SWGManagerUsersApi_H_

#include "SWGHttpRequest.h"

#include "ModelUser.h"
#include "ModelUserCreate.h"
#include "ModelUserSearch.h"
#include "ModelUserUpdate.h"

#include <QObject>

namespace api {

class SWGManagerUsersApi: public QObject {
    Q_OBJECT

public:
    SWGManagerUsersApi();
    SWGManagerUsersApi(QString host, QString basePath);
    ~SWGManagerUsersApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerCreateUser(ModelUserCreate body);
    void managerDeleteUser(qint64 user_id);
    void managerGetUser(qint32 user_id);
    void managerListUsers(qint32 page, qint32 limit);
    void managerSearchUser(ModelUserSearch body);
    void managerUpdateUser(ModelUserUpdate body);
    
private:
    void managerCreateUserCallback (HttpRequestWorker * worker);
    void managerDeleteUserCallback (HttpRequestWorker * worker);
    void managerGetUserCallback (HttpRequestWorker * worker);
    void managerListUsersCallback (HttpRequestWorker * worker);
    void managerSearchUserCallback (HttpRequestWorker * worker);
    void managerUpdateUserCallback (HttpRequestWorker * worker);
    
signals:
    void managerCreateUserSignal(ModelUser* summary);
    void managerDeleteUserSignal();
    void managerGetUserSignal(ModelUser* summary);
    void managerListUsersSignal(QList<ModelUser*>* summary);
    void managerSearchUserSignal(ModelUser* summary);
    void managerUpdateUserSignal(ModelUser* summary);
    
    void managerCreateUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteUserSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerListUsersSignalE(QList<ModelUser*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerSearchUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateUserSignalE(ModelUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerCreateUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerListUsersSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerSearchUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateUserSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
