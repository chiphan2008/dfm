/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGManagerRoutesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGManagerRoutesApi::SWGManagerRoutesApi() {}

SWGManagerRoutesApi::~SWGManagerRoutesApi() {}

SWGManagerRoutesApi::SWGManagerRoutesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGManagerRoutesApi::managerDeleteRoute(qint64 route_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/routes/{routeId}");

    QString route_idPathParam("{"); route_idPathParam.append("routeId").append("}");
    fullPath.replace(route_idPathParam, stringValue(route_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRoutesApi::managerDeleteRouteCallback);

    worker->execute(&input);
}

void
SWGManagerRoutesApi::managerDeleteRouteCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerDeleteRouteSignal();
    } else {
        emit managerDeleteRouteSignalE(error_type, error_str);
        emit managerDeleteRouteSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRoutesApi::managerGetRouteById(qint64 route_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/routes/{routeId}");

    QString route_idPathParam("{"); route_idPathParam.append("routeId").append("}");
    fullPath.replace(route_idPathParam, stringValue(route_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRoutesApi::managerGetRouteByIdCallback);

    worker->execute(&input);
}

void
SWGManagerRoutesApi::managerGetRouteByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRoute* output = static_cast<ModelRoute*>(create(json, QString("ModelRoute")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerGetRouteByIdSignal(output);
    } else {
        emit managerGetRouteByIdSignalE(output, error_type, error_str);
        emit managerGetRouteByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRoutesApi::managerUpdateRoute(ModelRouteForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/routes");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRoutesApi::managerUpdateRouteCallback);

    worker->execute(&input);
}

void
SWGManagerRoutesApi::managerUpdateRouteCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRoute* output = static_cast<ModelRoute*>(create(json, QString("ModelRoute")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerUpdateRouteSignal(output);
    } else {
        emit managerUpdateRouteSignalE(output, error_type, error_str);
        emit managerUpdateRouteSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRoutesApi::managerlistRoutes(qint32 page, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/routes");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRoutesApi::managerlistRoutesCallback);

    worker->execute(&input);
}

void
SWGManagerRoutesApi::managerlistRoutesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelRoute*>* output = new QList<ModelRoute*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelRoute* o = new ModelRoute();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerlistRoutesSignal(output);
    } else {
        emit managerlistRoutesSignalE(output, error_type, error_str);
        emit managerlistRoutesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRoutesApi::manmagerCreateRoute(ModelRouteForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/routes");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRoutesApi::manmagerCreateRouteCallback);

    worker->execute(&input);
}

void
SWGManagerRoutesApi::manmagerCreateRouteCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRoute* output = static_cast<ModelRoute*>(create(json, QString("ModelRoute")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit manmagerCreateRouteSignal(output);
    } else {
        emit manmagerCreateRouteSignalE(output, error_type, error_str);
        emit manmagerCreateRouteSignalEFull(worker, error_type, error_str);
    }
}


}
