/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGAdminRolesApi_H_
#define _SWG_SWGAdminRolesApi_H_

#include "SWGHttpRequest.h"

#include "ModelPermission.h"
#include "ModelRole.h"
#include "ModelRoleForm.h"
#include <QList>

#include <QObject>

namespace api {

class SWGAdminRolesApi: public QObject {
    Q_OBJECT

public:
    SWGAdminRolesApi();
    SWGAdminRolesApi(QString host, QString basePath);
    ~SWGAdminRolesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void assignPermissionToRoleId(qint64 role_id, QList<qint32>* body);
    void createRole(ModelRoleForm body);
    void deleteRole(qint64 role_id);
    void getPermissionsByRoleId(qint64 role_id);
    void getRoleById(qint64 role_id);
    void listRoles();
    void updateRole(ModelRoleForm body);
    
private:
    void assignPermissionToRoleIdCallback (HttpRequestWorker * worker);
    void createRoleCallback (HttpRequestWorker * worker);
    void deleteRoleCallback (HttpRequestWorker * worker);
    void getPermissionsByRoleIdCallback (HttpRequestWorker * worker);
    void getRoleByIdCallback (HttpRequestWorker * worker);
    void listRolesCallback (HttpRequestWorker * worker);
    void updateRoleCallback (HttpRequestWorker * worker);
    
signals:
    void assignPermissionToRoleIdSignal();
    void createRoleSignal(ModelRole* summary);
    void deleteRoleSignal();
    void getPermissionsByRoleIdSignal(QList<ModelPermission*>* summary);
    void getRoleByIdSignal(ModelRole* summary);
    void listRolesSignal(QList<ModelRole*>* summary);
    void updateRoleSignal(ModelRole* summary);
    
    void assignPermissionToRoleIdSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void createRoleSignalE(ModelRole* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteRoleSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getPermissionsByRoleIdSignalE(QList<ModelPermission*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRoleByIdSignalE(ModelRole* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void listRolesSignalE(QList<ModelRole*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateRoleSignalE(ModelRole* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void assignPermissionToRoleIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void createRoleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteRoleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPermissionsByRoleIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getRoleByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void listRolesSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateRoleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
