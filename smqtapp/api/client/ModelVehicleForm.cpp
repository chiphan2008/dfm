/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "ModelVehicleForm.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace api {

ModelVehicleForm::ModelVehicleForm(QString* json) {
    init();
    this->fromJson(*json);
}

ModelVehicleForm::ModelVehicleForm() {
    init();
}

ModelVehicleForm::~ModelVehicleForm() {
    this->cleanup();
}

void
ModelVehicleForm::init() {
    id = 0L;
    comany_id = 0L;
    route_id = 0L;
    is_running = 0;
    license_plates = new QString("");
    rfid = new QString("");
}

void
ModelVehicleForm::cleanup() {




    if(license_plates != nullptr) {
        delete license_plates;
    }
    if(rfid != nullptr) {
        delete rfid;
    }
}

ModelVehicleForm*
ModelVehicleForm::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
ModelVehicleForm::fromJsonObject(QJsonObject &pJson) {
    ::api::setValue(&id, pJson["id"], "qint64", "");
    ::api::setValue(&comany_id, pJson["comany_id"], "qint64", "");
    ::api::setValue(&route_id, pJson["route_id"], "qint64", "");
    ::api::setValue(&is_running, pJson["is_running"], "qint32", "");
    ::api::setValue(&license_plates, pJson["license_plates"], "QString", "QString");
    ::api::setValue(&rfid, pJson["rfid"], "QString", "QString");
}

QString
ModelVehicleForm::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
ModelVehicleForm::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("id", QJsonValue(id));
    obj->insert("comany_id", QJsonValue(comany_id));
    obj->insert("route_id", QJsonValue(route_id));
    obj->insert("is_running", QJsonValue(is_running));
    toJsonValue(QString("license_plates"), license_plates, obj, QString("QString"));
    toJsonValue(QString("rfid"), rfid, obj, QString("QString"));

    return obj;
}

qint64
ModelVehicleForm::getId() {
    return id;
}
void
ModelVehicleForm::setId(qint64 id) {
    this->id = id;
}

qint64
ModelVehicleForm::getComanyId() {
    return comany_id;
}
void
ModelVehicleForm::setComanyId(qint64 comany_id) {
    this->comany_id = comany_id;
}

qint64
ModelVehicleForm::getRouteId() {
    return route_id;
}
void
ModelVehicleForm::setRouteId(qint64 route_id) {
    this->route_id = route_id;
}

qint32
ModelVehicleForm::getIsRunning() {
    return is_running;
}
void
ModelVehicleForm::setIsRunning(qint32 is_running) {
    this->is_running = is_running;
}

QString*
ModelVehicleForm::getLicensePlates() {
    return license_plates;
}
void
ModelVehicleForm::setLicensePlates(QString* license_plates) {
    this->license_plates = license_plates;
}

QString*
ModelVehicleForm::getRfid() {
    return rfid;
}
void
ModelVehicleForm::setRfid(QString* rfid) {
    this->rfid = rfid;
}


}

