/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerSubscriptionTypesApi_H_
#define _SWG_SWGManagerSubscriptionTypesApi_H_

#include "SWGHttpRequest.h"

#include "ModelSubscriptionType.h"
#include "ModelSubscriptionTypeForm.h"

#include <QObject>

namespace api {

class SWGManagerSubscriptionTypesApi: public QObject {
    Q_OBJECT

public:
    SWGManagerSubscriptionTypesApi();
    SWGManagerSubscriptionTypesApi(QString host, QString basePath);
    ~SWGManagerSubscriptionTypesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerDeleteSubscriptionType(qint64 subscription_type_id);
    void managerGetSubscriptionTypeById(qint64 subscription_type_id);
    void managerUpdateSubscriptionType(ModelSubscriptionTypeForm body);
    void managerlistSubscriptionTypes();
    void manmagerCreateSubscriptionType(ModelSubscriptionTypeForm body);
    
private:
    void managerDeleteSubscriptionTypeCallback (HttpRequestWorker * worker);
    void managerGetSubscriptionTypeByIdCallback (HttpRequestWorker * worker);
    void managerUpdateSubscriptionTypeCallback (HttpRequestWorker * worker);
    void managerlistSubscriptionTypesCallback (HttpRequestWorker * worker);
    void manmagerCreateSubscriptionTypeCallback (HttpRequestWorker * worker);
    
signals:
    void managerDeleteSubscriptionTypeSignal();
    void managerGetSubscriptionTypeByIdSignal(ModelSubscriptionType* summary);
    void managerUpdateSubscriptionTypeSignal(ModelSubscriptionType* summary);
    void managerlistSubscriptionTypesSignal(QList<ModelSubscriptionType*>* summary);
    void manmagerCreateSubscriptionTypeSignal(ModelSubscriptionType* summary);
    
    void managerDeleteSubscriptionTypeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetSubscriptionTypeByIdSignalE(ModelSubscriptionType* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateSubscriptionTypeSignalE(ModelSubscriptionType* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistSubscriptionTypesSignalE(QList<ModelSubscriptionType*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void manmagerCreateSubscriptionTypeSignalE(ModelSubscriptionType* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerDeleteSubscriptionTypeSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetSubscriptionTypeByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateSubscriptionTypeSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistSubscriptionTypesSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void manmagerCreateSubscriptionTypeSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
