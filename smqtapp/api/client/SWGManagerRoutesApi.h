/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerRoutesApi_H_
#define _SWG_SWGManagerRoutesApi_H_

#include "SWGHttpRequest.h"

#include "ModelRoute.h"
#include "ModelRouteForm.h"

#include <QObject>

namespace api {

class SWGManagerRoutesApi: public QObject {
    Q_OBJECT

public:
    SWGManagerRoutesApi();
    SWGManagerRoutesApi(QString host, QString basePath);
    ~SWGManagerRoutesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerDeleteRoute(qint64 route_id);
    void managerGetRouteById(qint64 route_id);
    void managerUpdateRoute(ModelRouteForm body);
    void managerlistRoutes(qint32 page, qint32 limit);
    void manmagerCreateRoute(ModelRouteForm body);
    
private:
    void managerDeleteRouteCallback (HttpRequestWorker * worker);
    void managerGetRouteByIdCallback (HttpRequestWorker * worker);
    void managerUpdateRouteCallback (HttpRequestWorker * worker);
    void managerlistRoutesCallback (HttpRequestWorker * worker);
    void manmagerCreateRouteCallback (HttpRequestWorker * worker);
    
signals:
    void managerDeleteRouteSignal();
    void managerGetRouteByIdSignal(ModelRoute* summary);
    void managerUpdateRouteSignal(ModelRoute* summary);
    void managerlistRoutesSignal(QList<ModelRoute*>* summary);
    void manmagerCreateRouteSignal(ModelRoute* summary);
    
    void managerDeleteRouteSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetRouteByIdSignalE(ModelRoute* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateRouteSignalE(ModelRoute* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistRoutesSignalE(QList<ModelRoute*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void manmagerCreateRouteSignalE(ModelRoute* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerDeleteRouteSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetRouteByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateRouteSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistRoutesSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void manmagerCreateRouteSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
