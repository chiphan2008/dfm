/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAuthApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGAuthApi::SWGAuthApi() {}

SWGAuthApi::~SWGAuthApi() {}

SWGAuthApi::SWGAuthApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAuthApi::login(ModelLogin body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/login");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthApi::loginCallback);

    worker->execute(&input);
}

void
SWGAuthApi::loginCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelLoginView* output = static_cast<ModelLoginView*>(create(json, QString("ModelLoginView")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit loginSignal(output);
    } else {
        emit loginSignalE(output, error_type, error_str);
        emit loginSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAuthApi::loginAsCompany(qint64 company_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/loginAs/{companyId}");

    QString company_idPathParam("{"); company_idPathParam.append("companyId").append("}");
    fullPath.replace(company_idPathParam, stringValue(company_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthApi::loginAsCompanyCallback);

    worker->execute(&input);
}

void
SWGAuthApi::loginAsCompanyCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelLoginView* output = static_cast<ModelLoginView*>(create(json, QString("ModelLoginView")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit loginAsCompanySignal(output);
    } else {
        emit loginAsCompanySignalE(output, error_type, error_str);
        emit loginAsCompanySignalEFull(worker, error_type, error_str);
    }
}

void
SWGAuthApi::logout(ModelLogout body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/auth/logout");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAuthApi::logoutCallback);

    worker->execute(&input);
}

void
SWGAuthApi::logoutCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit logoutSignal();
    } else {
        emit logoutSignalE(error_type, error_str);
        emit logoutSignalEFull(worker, error_type, error_str);
    }
}


}
