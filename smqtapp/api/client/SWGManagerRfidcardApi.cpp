/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGManagerRfidcardApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGManagerRfidcardApi::SWGManagerRfidcardApi() {}

SWGManagerRfidcardApi::~SWGManagerRfidcardApi() {}

SWGManagerRfidcardApi::SWGManagerRfidcardApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGManagerRfidcardApi::managerCreateRfidcard(ModelRfidCardCreate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/rfidcard");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRfidcardApi::managerCreateRfidcardCallback);

    worker->execute(&input);
}

void
SWGManagerRfidcardApi::managerCreateRfidcardCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRfidCard* output = static_cast<ModelRfidCard*>(create(json, QString("ModelRfidCard")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerCreateRfidcardSignal(output);
    } else {
        emit managerCreateRfidcardSignalE(output, error_type, error_str);
        emit managerCreateRfidcardSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRfidcardApi::managerDeleteRfidcard(qint64 rfidcard_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/rfidcard/{rfidcardId}");

    QString rfidcard_idPathParam("{"); rfidcard_idPathParam.append("rfidcardId").append("}");
    fullPath.replace(rfidcard_idPathParam, stringValue(rfidcard_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRfidcardApi::managerDeleteRfidcardCallback);

    worker->execute(&input);
}

void
SWGManagerRfidcardApi::managerDeleteRfidcardCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerDeleteRfidcardSignal();
    } else {
        emit managerDeleteRfidcardSignalE(error_type, error_str);
        emit managerDeleteRfidcardSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRfidcardApi::managerGetRfidcardById(qint64 rfidcard_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/rfidcard/{rfidcardId}");

    QString rfidcard_idPathParam("{"); rfidcard_idPathParam.append("rfidcardId").append("}");
    fullPath.replace(rfidcard_idPathParam, stringValue(rfidcard_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRfidcardApi::managerGetRfidcardByIdCallback);

    worker->execute(&input);
}

void
SWGManagerRfidcardApi::managerGetRfidcardByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRfidCard* output = static_cast<ModelRfidCard*>(create(json, QString("ModelRfidCard")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerGetRfidcardByIdSignal(output);
    } else {
        emit managerGetRfidcardByIdSignalE(output, error_type, error_str);
        emit managerGetRfidcardByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRfidcardApi::managerSearchRfidcard(ModelRfidCardCreate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/rfidcard/search");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRfidcardApi::managerSearchRfidcardCallback);

    worker->execute(&input);
}

void
SWGManagerRfidcardApi::managerSearchRfidcardCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRfidCard* output = static_cast<ModelRfidCard*>(create(json, QString("ModelRfidCard")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerSearchRfidcardSignal(output);
    } else {
        emit managerSearchRfidcardSignalE(output, error_type, error_str);
        emit managerSearchRfidcardSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRfidcardApi::managerUpdateRfidcard(ModelRfidCardUpdate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/rfidcard");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRfidcardApi::managerUpdateRfidcardCallback);

    worker->execute(&input);
}

void
SWGManagerRfidcardApi::managerUpdateRfidcardCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelRfidCard* output = static_cast<ModelRfidCard*>(create(json, QString("ModelRfidCard")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerUpdateRfidcardSignal(output);
    } else {
        emit managerUpdateRfidcardSignalE(output, error_type, error_str);
        emit managerUpdateRfidcardSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerRfidcardApi::managerlistRfidcards() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/rfidcard");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerRfidcardApi::managerlistRfidcardsCallback);

    worker->execute(&input);
}

void
SWGManagerRfidcardApi::managerlistRfidcardsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelRfidCard*>* output = new QList<ModelRfidCard*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelRfidCard* o = new ModelRfidCard();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerlistRfidcardsSignal(output);
    } else {
        emit managerlistRfidcardsSignalE(output, error_type, error_str);
        emit managerlistRfidcardsSignalEFull(worker, error_type, error_str);
    }
}


}
