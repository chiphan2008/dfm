/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGManagerReportsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGManagerReportsApi::SWGManagerReportsApi() {}

SWGManagerReportsApi::~SWGManagerReportsApi() {}

SWGManagerReportsApi::SWGManagerReportsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGManagerReportsApi::managerReportsExportReceipt(ModelReceiptForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/reports/receipt/export");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerReportsApi::managerReportsExportReceiptCallback);

    worker->execute(&input);
}

void
SWGManagerReportsApi::managerReportsExportReceiptCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerReportsExportReceiptSignal(output);
    } else {
        emit managerReportsExportReceiptSignalE(output, error_type, error_str);
        emit managerReportsExportReceiptSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerReportsApi::managerReportsExportRoute(ModelRpRouteForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/reports/route/export");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerReportsApi::managerReportsExportRouteCallback);

    worker->execute(&input);
}

void
SWGManagerReportsApi::managerReportsExportRouteCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerReportsExportRouteSignal(output);
    } else {
        emit managerReportsExportRouteSignalE(output, error_type, error_str);
        emit managerReportsExportRouteSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerReportsApi::managerReportsExportStaff(ModelRpStaffForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/reports/staff/export");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerReportsApi::managerReportsExportStaffCallback);

    worker->execute(&input);
}

void
SWGManagerReportsApi::managerReportsExportStaffCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerReportsExportStaffSignal(output);
    } else {
        emit managerReportsExportStaffSignalE(output, error_type, error_str);
        emit managerReportsExportStaffSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerReportsApi::managerReportsGetReceiptDetailByShiftId(qint64 shift_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/reports/receipt/shift/{shiftId}");

    QString shift_idPathParam("{"); shift_idPathParam.append("shiftId").append("}");
    fullPath.replace(shift_idPathParam, stringValue(shift_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerReportsApi::managerReportsGetReceiptDetailByShiftIdCallback);

    worker->execute(&input);
}

void
SWGManagerReportsApi::managerReportsGetReceiptDetailByShiftIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelReceiptDetail* output = static_cast<ModelReceiptDetail*>(create(json, QString("ModelReceiptDetail")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerReportsGetReceiptDetailByShiftIdSignal(output);
    } else {
        emit managerReportsGetReceiptDetailByShiftIdSignalE(output, error_type, error_str);
        emit managerReportsGetReceiptDetailByShiftIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGManagerReportsApi::managerReportsViewReceipt(ModelReceiptForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/manager/reports/receipt/view");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGManagerReportsApi::managerReportsViewReceiptCallback);

    worker->execute(&input);
}

void
SWGManagerReportsApi::managerReportsViewReceiptCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelReceiptView*>* output = new QList<ModelReceiptView*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelReceiptView* o = new ModelReceiptView();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit managerReportsViewReceiptSignal(output);
    } else {
        emit managerReportsViewReceiptSignalE(output, error_type, error_str);
        emit managerReportsViewReceiptSignalEFull(worker, error_type, error_str);
    }
}


}
