/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "ModelUser.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace api {

ModelUser::ModelUser(QString* json) {
    init();
    this->fromJson(*json);
}

ModelUser::ModelUser() {
    init();
}

ModelUser::~ModelUser() {
    this->cleanup();
}

void
ModelUser::init() {
    id = 0L;
    role_id = 0L;
    role = new ModelRole();
    company_id = 0L;
    company = new ModelCompany();
    permissions = new QList<ModelPermission*>();
    pin_code = 0L;
    rfidcard_id = 0L;
    rfidcard = new ModelRfidCard();
    username = new QString("");
    email = new QString("");
    fullname = new QString("");
    birthday = NULL;
    address = new QString("");
    sidn = new QString("");
    gender = 0;
    phone = new QString("");
    created_at = NULL;
    updated_at = NULL;
}

void
ModelUser::cleanup() {


    if(role != nullptr) {
        delete role;
    }

    if(company != nullptr) {
        delete company;
    }
    if(permissions != nullptr) {
        QList<ModelPermission*>* arr = permissions;
        foreach(ModelPermission* o, *arr) {
            delete o;
        }
        delete permissions;
    }


    if(rfidcard != nullptr) {
        delete rfidcard;
    }
    if(username != nullptr) {
        delete username;
    }
    if(email != nullptr) {
        delete email;
    }
    if(fullname != nullptr) {
        delete fullname;
    }
    if(birthday != nullptr) {
        delete birthday;
    }
    if(address != nullptr) {
        delete address;
    }
    if(sidn != nullptr) {
        delete sidn;
    }

    if(phone != nullptr) {
        delete phone;
    }
    if(created_at != nullptr) {
        delete created_at;
    }
    if(updated_at != nullptr) {
        delete updated_at;
    }
}

ModelUser*
ModelUser::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
ModelUser::fromJsonObject(QJsonObject &pJson) {
    ::api::setValue(&id, pJson["id"], "qint64", "");
    ::api::setValue(&role_id, pJson["role_id"], "qint64", "");
    ::api::setValue(&role, pJson["role"], "ModelRole", "ModelRole");
    ::api::setValue(&company_id, pJson["company_id"], "qint64", "");
    ::api::setValue(&company, pJson["company"], "ModelCompany", "ModelCompany");
    ::api::setValue(&permissions, pJson["permissions"], "QList", "ModelPermission");
    ::api::setValue(&pin_code, pJson["pin_code"], "qint64", "");
    ::api::setValue(&rfidcard_id, pJson["rfidcard_id"], "qint64", "");
    ::api::setValue(&rfidcard, pJson["rfidcard"], "ModelRfidCard", "ModelRfidCard");
    ::api::setValue(&username, pJson["username"], "QString", "QString");
    ::api::setValue(&email, pJson["email"], "QString", "QString");
    ::api::setValue(&fullname, pJson["fullname"], "QString", "QString");
    ::api::setValue(&birthday, pJson["birthday"], "QDateTime", "QDateTime");
    ::api::setValue(&address, pJson["address"], "QString", "QString");
    ::api::setValue(&sidn, pJson["sidn"], "QString", "QString");
    ::api::setValue(&gender, pJson["gender"], "qint32", "");
    ::api::setValue(&phone, pJson["phone"], "QString", "QString");
    ::api::setValue(&created_at, pJson["created_at"], "QDateTime", "QDateTime");
    ::api::setValue(&updated_at, pJson["updated_at"], "QDateTime", "QDateTime");
}

QString
ModelUser::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
ModelUser::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    obj->insert("id", QJsonValue(id));
    obj->insert("role_id", QJsonValue(role_id));
    toJsonValue(QString("role"), role, obj, QString("ModelRole"));
    obj->insert("company_id", QJsonValue(company_id));
    toJsonValue(QString("company"), company, obj, QString("ModelCompany"));
    QJsonArray permissionsJsonArray;
    toJsonArray((QList<void*>*)permissions, &permissionsJsonArray, "permissions", "ModelPermission");
    obj->insert("permissions", permissionsJsonArray);
    obj->insert("pin_code", QJsonValue(pin_code));
    obj->insert("rfidcard_id", QJsonValue(rfidcard_id));
    toJsonValue(QString("rfidcard"), rfidcard, obj, QString("ModelRfidCard"));
    toJsonValue(QString("username"), username, obj, QString("QString"));
    toJsonValue(QString("email"), email, obj, QString("QString"));
    toJsonValue(QString("fullname"), fullname, obj, QString("QString"));
    toJsonValue(QString("birthday"), birthday, obj, QString("QDateTime"));
    toJsonValue(QString("address"), address, obj, QString("QString"));
    toJsonValue(QString("sidn"), sidn, obj, QString("QString"));
    obj->insert("gender", QJsonValue(gender));
    toJsonValue(QString("phone"), phone, obj, QString("QString"));
    toJsonValue(QString("created_at"), created_at, obj, QString("QDateTime"));
    toJsonValue(QString("updated_at"), updated_at, obj, QString("QDateTime"));

    return obj;
}

qint64
ModelUser::getId() {
    return id;
}
void
ModelUser::setId(qint64 id) {
    this->id = id;
}

qint64
ModelUser::getRoleId() {
    return role_id;
}
void
ModelUser::setRoleId(qint64 role_id) {
    this->role_id = role_id;
}

ModelRole*
ModelUser::getRole() {
    return role;
}
void
ModelUser::setRole(ModelRole* role) {
    this->role = role;
}

qint64
ModelUser::getCompanyId() {
    return company_id;
}
void
ModelUser::setCompanyId(qint64 company_id) {
    this->company_id = company_id;
}

ModelCompany*
ModelUser::getCompany() {
    return company;
}
void
ModelUser::setCompany(ModelCompany* company) {
    this->company = company;
}

QList<ModelPermission*>*
ModelUser::getPermissions() {
    return permissions;
}
void
ModelUser::setPermissions(QList<ModelPermission*>* permissions) {
    this->permissions = permissions;
}

qint64
ModelUser::getPinCode() {
    return pin_code;
}
void
ModelUser::setPinCode(qint64 pin_code) {
    this->pin_code = pin_code;
}

qint64
ModelUser::getRfidcardId() {
    return rfidcard_id;
}
void
ModelUser::setRfidcardId(qint64 rfidcard_id) {
    this->rfidcard_id = rfidcard_id;
}

ModelRfidCard*
ModelUser::getRfidcard() {
    return rfidcard;
}
void
ModelUser::setRfidcard(ModelRfidCard* rfidcard) {
    this->rfidcard = rfidcard;
}

QString*
ModelUser::getUsername() {
    return username;
}
void
ModelUser::setUsername(QString* username) {
    this->username = username;
}

QString*
ModelUser::getEmail() {
    return email;
}
void
ModelUser::setEmail(QString* email) {
    this->email = email;
}

QString*
ModelUser::getFullname() {
    return fullname;
}
void
ModelUser::setFullname(QString* fullname) {
    this->fullname = fullname;
}

QDateTime*
ModelUser::getBirthday() {
    return birthday;
}
void
ModelUser::setBirthday(QDateTime* birthday) {
    this->birthday = birthday;
}

QString*
ModelUser::getAddress() {
    return address;
}
void
ModelUser::setAddress(QString* address) {
    this->address = address;
}

QString*
ModelUser::getSidn() {
    return sidn;
}
void
ModelUser::setSidn(QString* sidn) {
    this->sidn = sidn;
}

qint32
ModelUser::getGender() {
    return gender;
}
void
ModelUser::setGender(qint32 gender) {
    this->gender = gender;
}

QString*
ModelUser::getPhone() {
    return phone;
}
void
ModelUser::setPhone(QString* phone) {
    this->phone = phone;
}

QDateTime*
ModelUser::getCreatedAt() {
    return created_at;
}
void
ModelUser::setCreatedAt(QDateTime* created_at) {
    this->created_at = created_at;
}

QDateTime*
ModelUser::getUpdatedAt() {
    return updated_at;
}
void
ModelUser::setUpdatedAt(QDateTime* updated_at) {
    this->updated_at = updated_at;
}


}

