/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "ModelMachineLoginView.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace api {

ModelMachineLoginView::ModelMachineLoginView(QString* json) {
    init();
    this->fromJson(*json);
}

ModelMachineLoginView::ModelMachineLoginView() {
    init();
}

ModelMachineLoginView::~ModelMachineLoginView() {
    this->cleanup();
}

void
ModelMachineLoginView::init() {
    user = new ModelUser();
    vehicle = new ModelVehicle();
    device = new ModelDevice();
    started = NULL;
    shift_token = new QString("");
}

void
ModelMachineLoginView::cleanup() {
    if(user != nullptr) {
        delete user;
    }
    if(vehicle != nullptr) {
        delete vehicle;
    }
    if(device != nullptr) {
        delete device;
    }
    if(started != nullptr) {
        delete started;
    }
    if(shift_token != nullptr) {
        delete shift_token;
    }
}

ModelMachineLoginView*
ModelMachineLoginView::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
ModelMachineLoginView::fromJsonObject(QJsonObject &pJson) {
    ::api::setValue(&user, pJson["user"], "ModelUser", "ModelUser");
    ::api::setValue(&vehicle, pJson["vehicle"], "ModelVehicle", "ModelVehicle");
    ::api::setValue(&device, pJson["device"], "ModelDevice", "ModelDevice");
    ::api::setValue(&started, pJson["started"], "QDateTime", "QDateTime");
    ::api::setValue(&shift_token, pJson["shift_token"], "QString", "QString");
}

QString
ModelMachineLoginView::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
ModelMachineLoginView::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    toJsonValue(QString("user"), user, obj, QString("ModelUser"));
    toJsonValue(QString("vehicle"), vehicle, obj, QString("ModelVehicle"));
    toJsonValue(QString("device"), device, obj, QString("ModelDevice"));
    toJsonValue(QString("started"), started, obj, QString("QDateTime"));
    toJsonValue(QString("shift_token"), shift_token, obj, QString("QString"));

    return obj;
}

ModelUser*
ModelMachineLoginView::getUser() {
    return user;
}
void
ModelMachineLoginView::setUser(ModelUser* user) {
    this->user = user;
}

ModelVehicle*
ModelMachineLoginView::getVehicle() {
    return vehicle;
}
void
ModelMachineLoginView::setVehicle(ModelVehicle* vehicle) {
    this->vehicle = vehicle;
}

ModelDevice*
ModelMachineLoginView::getDevice() {
    return device;
}
void
ModelMachineLoginView::setDevice(ModelDevice* device) {
    this->device = device;
}

QDateTime*
ModelMachineLoginView::getStarted() {
    return started;
}
void
ModelMachineLoginView::setStarted(QDateTime* started) {
    this->started = started;
}

QString*
ModelMachineLoginView::getShiftToken() {
    return shift_token;
}
void
ModelMachineLoginView::setShiftToken(QString* shift_token) {
    this->shift_token = shift_token;
}


}

