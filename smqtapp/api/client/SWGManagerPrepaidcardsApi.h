/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerPrepaidcardsApi_H_
#define _SWG_SWGManagerPrepaidcardsApi_H_

#include "SWGHttpRequest.h"

#include "ModelPrepaidCard.h"
#include "ModelPrepaidCardForm.h"

#include <QObject>

namespace api {

class SWGManagerPrepaidcardsApi: public QObject {
    Q_OBJECT

public:
    SWGManagerPrepaidcardsApi();
    SWGManagerPrepaidcardsApi(QString host, QString basePath);
    ~SWGManagerPrepaidcardsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerCreatePrepaidcard(ModelPrepaidCardForm body);
    void managerDeletePrepaidcard(qint64 prepaidcard_id);
    void managerGetPrepaidcardsById(qint64 prepaidcard_id);
    void managerUpdatePrepaidcard(ModelPrepaidCardForm body);
    void managerlistPrepaidcards();
    
private:
    void managerCreatePrepaidcardCallback (HttpRequestWorker * worker);
    void managerDeletePrepaidcardCallback (HttpRequestWorker * worker);
    void managerGetPrepaidcardsByIdCallback (HttpRequestWorker * worker);
    void managerUpdatePrepaidcardCallback (HttpRequestWorker * worker);
    void managerlistPrepaidcardsCallback (HttpRequestWorker * worker);
    
signals:
    void managerCreatePrepaidcardSignal(ModelPrepaidCard* summary);
    void managerDeletePrepaidcardSignal();
    void managerGetPrepaidcardsByIdSignal(ModelPrepaidCard* summary);
    void managerUpdatePrepaidcardSignal(ModelPrepaidCard* summary);
    void managerlistPrepaidcardsSignal(QList<ModelPrepaidCard*>* summary);
    
    void managerCreatePrepaidcardSignalE(ModelPrepaidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeletePrepaidcardSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetPrepaidcardsByIdSignalE(ModelPrepaidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdatePrepaidcardSignalE(ModelPrepaidCard* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistPrepaidcardsSignalE(QList<ModelPrepaidCard*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerCreatePrepaidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeletePrepaidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetPrepaidcardsByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdatePrepaidcardSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistPrepaidcardsSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
