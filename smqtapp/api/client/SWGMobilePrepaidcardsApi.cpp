/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGMobilePrepaidcardsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGMobilePrepaidcardsApi::SWGMobilePrepaidcardsApi() {}

SWGMobilePrepaidcardsApi::~SWGMobilePrepaidcardsApi() {}

SWGMobilePrepaidcardsApi::SWGMobilePrepaidcardsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGMobilePrepaidcardsApi::mobileGetPrepaidcardByBarcode(QString* barcode) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/mobile/prepaidcards/barcode/{barcode}");

    QString barcodePathParam("{"); barcodePathParam.append("barcode").append("}");
    fullPath.replace(barcodePathParam, stringValue(barcode));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGMobilePrepaidcardsApi::mobileGetPrepaidcardByBarcodeCallback);

    worker->execute(&input);
}

void
SWGMobilePrepaidcardsApi::mobileGetPrepaidcardByBarcodeCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelPrepaidCard* output = static_cast<ModelPrepaidCard*>(create(json, QString("ModelPrepaidCard")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit mobileGetPrepaidcardByBarcodeSignal(output);
    } else {
        emit mobileGetPrepaidcardByBarcodeSignalE(output, error_type, error_str);
        emit mobileGetPrepaidcardByBarcodeSignalEFull(worker, error_type, error_str);
    }
}


}
