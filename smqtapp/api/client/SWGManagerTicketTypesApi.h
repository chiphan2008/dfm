/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerTicketTypesApi_H_
#define _SWG_SWGManagerTicketTypesApi_H_

#include "SWGHttpRequest.h"

#include "ModelTicketType.h"
#include "ModelTicketTypeForm.h"

#include <QObject>

namespace api {

class SWGManagerTicketTypesApi: public QObject {
    Q_OBJECT

public:
    SWGManagerTicketTypesApi();
    SWGManagerTicketTypesApi(QString host, QString basePath);
    ~SWGManagerTicketTypesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerCreateTicketType(ModelTicketTypeForm body);
    void managerDeleteticketType(qint64 ticket_type_id);
    void managerGetTicketTypeById(qint64 ticket_type_id);
    void managerUpdateTicketType(ModelTicketTypeForm body);
    void managerlistTicketTypes(qint32 page, qint32 limit);
    
private:
    void managerCreateTicketTypeCallback (HttpRequestWorker * worker);
    void managerDeleteticketTypeCallback (HttpRequestWorker * worker);
    void managerGetTicketTypeByIdCallback (HttpRequestWorker * worker);
    void managerUpdateTicketTypeCallback (HttpRequestWorker * worker);
    void managerlistTicketTypesCallback (HttpRequestWorker * worker);
    
signals:
    void managerCreateTicketTypeSignal(ModelTicketType* summary);
    void managerDeleteticketTypeSignal();
    void managerGetTicketTypeByIdSignal(ModelTicketType* summary);
    void managerUpdateTicketTypeSignal(ModelTicketType* summary);
    void managerlistTicketTypesSignal(QList<ModelTicketType*>* summary);
    
    void managerCreateTicketTypeSignalE(ModelTicketType* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteticketTypeSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetTicketTypeByIdSignalE(ModelTicketType* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateTicketTypeSignalE(ModelTicketType* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistTicketTypesSignalE(QList<ModelTicketType*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerCreateTicketTypeSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteticketTypeSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetTicketTypeByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateTicketTypeSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistTicketTypesSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
