/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAdminDevicesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGAdminDevicesApi::SWGAdminDevicesApi() {}

SWGAdminDevicesApi::~SWGAdminDevicesApi() {}

SWGAdminDevicesApi::SWGAdminDevicesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAdminDevicesApi::assignCompanyToDevice(qint64 device_id, qint64 company_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/{deviceId}/company/{companyId}");

    QString device_idPathParam("{"); device_idPathParam.append("deviceId").append("}");
    fullPath.replace(device_idPathParam, stringValue(device_id));
    QString company_idPathParam("{"); company_idPathParam.append("companyId").append("}");
    fullPath.replace(company_idPathParam, stringValue(company_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::assignCompanyToDeviceCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::assignCompanyToDeviceCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit assignCompanyToDeviceSignal();
    } else {
        emit assignCompanyToDeviceSignalE(error_type, error_str);
        emit assignCompanyToDeviceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::createDevModel(ModelDevModelForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::createDevModelCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::createDevModelCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelDevModel* output = static_cast<ModelDevModel*>(create(json, QString("ModelDevModel")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createDevModelSignal(output);
    } else {
        emit createDevModelSignalE(output, error_type, error_str);
        emit createDevModelSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::createDevice(ModelDeviceForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::createDeviceCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::createDeviceCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelDevice* output = static_cast<ModelDevice*>(create(json, QString("ModelDevice")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createDeviceSignal(output);
    } else {
        emit createDeviceSignalE(output, error_type, error_str);
        emit createDeviceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::createFirmware(qint64 model_id, ModelFirmwareForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}/firmwares");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::createFirmwareCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::createFirmwareCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelFirmware* output = static_cast<ModelFirmware*>(create(json, QString("ModelFirmware")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createFirmwareSignal(output);
    } else {
        emit createFirmwareSignalE(output, error_type, error_str);
        emit createFirmwareSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::deleteAssignCompanyToDevice(qint64 device_id, qint64 company_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/{deviceId}/company/{companyId}");

    QString device_idPathParam("{"); device_idPathParam.append("deviceId").append("}");
    fullPath.replace(device_idPathParam, stringValue(device_id));
    QString company_idPathParam("{"); company_idPathParam.append("companyId").append("}");
    fullPath.replace(company_idPathParam, stringValue(company_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::deleteAssignCompanyToDeviceCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::deleteAssignCompanyToDeviceCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteAssignCompanyToDeviceSignal();
    } else {
        emit deleteAssignCompanyToDeviceSignalE(error_type, error_str);
        emit deleteAssignCompanyToDeviceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::deleteDevModel(qint64 model_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::deleteDevModelCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::deleteDevModelCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteDevModelSignal();
    } else {
        emit deleteDevModelSignalE(error_type, error_str);
        emit deleteDevModelSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::deleteDevice(qint64 device_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/{deviceId}");

    QString device_idPathParam("{"); device_idPathParam.append("deviceId").append("}");
    fullPath.replace(device_idPathParam, stringValue(device_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::deleteDeviceCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::deleteDeviceCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteDeviceSignal();
    } else {
        emit deleteDeviceSignalE(error_type, error_str);
        emit deleteDeviceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::deleteFirmware(qint64 model_id, qint64 firmware_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}/firmwares/{firmwareId}");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));
    QString firmware_idPathParam("{"); firmware_idPathParam.append("firmwareId").append("}");
    fullPath.replace(firmware_idPathParam, stringValue(firmware_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::deleteFirmwareCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::deleteFirmwareCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteFirmwareSignal();
    } else {
        emit deleteFirmwareSignalE(error_type, error_str);
        emit deleteFirmwareSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::getDevModelById(qint64 model_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::getDevModelByIdCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::getDevModelByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelDevModel* output = static_cast<ModelDevModel*>(create(json, QString("ModelDevModel")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDevModelByIdSignal(output);
    } else {
        emit getDevModelByIdSignalE(output, error_type, error_str);
        emit getDevModelByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::getDeviceById(qint64 device_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/{deviceId}");

    QString device_idPathParam("{"); device_idPathParam.append("deviceId").append("}");
    fullPath.replace(device_idPathParam, stringValue(device_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::getDeviceByIdCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::getDeviceByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelDevice* output = static_cast<ModelDevice*>(create(json, QString("ModelDevice")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getDeviceByIdSignal(output);
    } else {
        emit getDeviceByIdSignalE(output, error_type, error_str);
        emit getDeviceByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::getFirmwareByIdAndModelId(qint64 model_id, qint64 firmware_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}/firmwares/{firmwareId}");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));
    QString firmware_idPathParam("{"); firmware_idPathParam.append("firmwareId").append("}");
    fullPath.replace(firmware_idPathParam, stringValue(firmware_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::getFirmwareByIdAndModelIdCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::getFirmwareByIdAndModelIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelFirmware* output = static_cast<ModelFirmware*>(create(json, QString("ModelFirmware")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getFirmwareByIdAndModelIdSignal(output);
    } else {
        emit getFirmwareByIdAndModelIdSignalE(output, error_type, error_str);
        emit getFirmwareByIdAndModelIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::listDevModels() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::listDevModelsCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::listDevModelsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelDevModel*>* output = new QList<ModelDevModel*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelDevModel* o = new ModelDevModel();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listDevModelsSignal(output);
    } else {
        emit listDevModelsSignalE(output, error_type, error_str);
        emit listDevModelsSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::listDevices(qint32 page, qint32 limit) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("limit"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(limit)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::listDevicesCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::listDevicesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelDevice*>* output = new QList<ModelDevice*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelDevice* o = new ModelDevice();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listDevicesSignal(output);
    } else {
        emit listDevicesSignalE(output, error_type, error_str);
        emit listDevicesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::listFirmwares(qint64 model_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}/firmwares");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::listFirmwaresCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::listFirmwaresCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelFirmware*>* output = new QList<ModelFirmware*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelFirmware* o = new ModelFirmware();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listFirmwaresSignal(output);
    } else {
        emit listFirmwaresSignalE(output, error_type, error_str);
        emit listFirmwaresSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::updateDevModel(ModelDevModelForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::updateDevModelCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::updateDevModelCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelDevModel* output = static_cast<ModelDevModel*>(create(json, QString("ModelDevModel")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateDevModelSignal(output);
    } else {
        emit updateDevModelSignalE(output, error_type, error_str);
        emit updateDevModelSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::updateDevice(ModelDeviceForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::updateDeviceCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::updateDeviceCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelDevice* output = static_cast<ModelDevice*>(create(json, QString("ModelDevice")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateDeviceSignal(output);
    } else {
        emit updateDeviceSignalE(output, error_type, error_str);
        emit updateDeviceSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminDevicesApi::updateFirmware(qint64 model_id, ModelFirmwareForm body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/devices/models/{modelId}/firmwares");

    QString model_idPathParam("{"); model_idPathParam.append("modelId").append("}");
    fullPath.replace(model_idPathParam, stringValue(model_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminDevicesApi::updateFirmwareCallback);

    worker->execute(&input);
}

void
SWGAdminDevicesApi::updateFirmwareCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelFirmware* output = static_cast<ModelFirmware*>(create(json, QString("ModelFirmware")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateFirmwareSignal(output);
    } else {
        emit updateFirmwareSignalE(output, error_type, error_str);
        emit updateFirmwareSignalEFull(worker, error_type, error_str);
    }
}


}
