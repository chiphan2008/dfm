/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGManagerVehiclesApi_H_
#define _SWG_SWGManagerVehiclesApi_H_

#include "SWGHttpRequest.h"

#include "ModelVehicle.h"
#include "ModelVehicleForm.h"

#include <QObject>

namespace api {

class SWGManagerVehiclesApi: public QObject {
    Q_OBJECT

public:
    SWGManagerVehiclesApi();
    SWGManagerVehiclesApi(QString host, QString basePath);
    ~SWGManagerVehiclesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void managerCreateVehicle(ModelVehicleForm body);
    void managerDeleteVehicle(qint64 vehicle_id);
    void managerGetVehicleById(qint64 vehicle_id);
    void managerUpdateVehicle(ModelVehicleForm body);
    void managerVehicleAssignRoute(ModelVehicleForm body);
    void managerlistVehicles(qint32 page, qint32 limit);
    
private:
    void managerCreateVehicleCallback (HttpRequestWorker * worker);
    void managerDeleteVehicleCallback (HttpRequestWorker * worker);
    void managerGetVehicleByIdCallback (HttpRequestWorker * worker);
    void managerUpdateVehicleCallback (HttpRequestWorker * worker);
    void managerVehicleAssignRouteCallback (HttpRequestWorker * worker);
    void managerlistVehiclesCallback (HttpRequestWorker * worker);
    
signals:
    void managerCreateVehicleSignal(ModelVehicle* summary);
    void managerDeleteVehicleSignal();
    void managerGetVehicleByIdSignal(ModelVehicle* summary);
    void managerUpdateVehicleSignal(ModelVehicle* summary);
    void managerVehicleAssignRouteSignal(ModelVehicle* summary);
    void managerlistVehiclesSignal(QList<ModelVehicle*>* summary);
    
    void managerCreateVehicleSignalE(ModelVehicle* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteVehicleSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetVehicleByIdSignalE(ModelVehicle* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateVehicleSignalE(ModelVehicle* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerVehicleAssignRouteSignalE(ModelVehicle* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistVehiclesSignalE(QList<ModelVehicle*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void managerCreateVehicleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerDeleteVehicleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerGetVehicleByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerUpdateVehicleSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerVehicleAssignRouteSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void managerlistVehiclesSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
