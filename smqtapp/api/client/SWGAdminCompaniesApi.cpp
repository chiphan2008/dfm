/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAdminCompaniesApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace api {

SWGAdminCompaniesApi::SWGAdminCompaniesApi() {}

SWGAdminCompaniesApi::~SWGAdminCompaniesApi() {}

SWGAdminCompaniesApi::SWGAdminCompaniesApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAdminCompaniesApi::createCompany(ModelCompanyCreate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/companies");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminCompaniesApi::createCompanyCallback);

    worker->execute(&input);
}

void
SWGAdminCompaniesApi::createCompanyCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelCompany* output = static_cast<ModelCompany*>(create(json, QString("ModelCompany")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createCompanySignal(output);
    } else {
        emit createCompanySignalE(output, error_type, error_str);
        emit createCompanySignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminCompaniesApi::deleteCompany(qint64 company_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/companies/{companyId}");

    QString company_idPathParam("{"); company_idPathParam.append("companyId").append("}");
    fullPath.replace(company_idPathParam, stringValue(company_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminCompaniesApi::deleteCompanyCallback);

    worker->execute(&input);
}

void
SWGAdminCompaniesApi::deleteCompanyCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit deleteCompanySignal();
    } else {
        emit deleteCompanySignalE(error_type, error_str);
        emit deleteCompanySignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminCompaniesApi::getCompanyById(qint64 company_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/companies/{companyId}");

    QString company_idPathParam("{"); company_idPathParam.append("companyId").append("}");
    fullPath.replace(company_idPathParam, stringValue(company_id));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminCompaniesApi::getCompanyByIdCallback);

    worker->execute(&input);
}

void
SWGAdminCompaniesApi::getCompanyByIdCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelCompany* output = static_cast<ModelCompany*>(create(json, QString("ModelCompany")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getCompanyByIdSignal(output);
    } else {
        emit getCompanyByIdSignalE(output, error_type, error_str);
        emit getCompanyByIdSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminCompaniesApi::listCompanies() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/companies");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminCompaniesApi::listCompaniesCallback);

    worker->execute(&input);
}

void
SWGAdminCompaniesApi::listCompaniesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<ModelCompany*>* output = new QList<ModelCompany*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();

    foreach(QJsonValue obj, jsonArray) {
        ModelCompany* o = new ModelCompany();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        output->append(o);
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listCompaniesSignal(output);
    } else {
        emit listCompaniesSignalE(output, error_type, error_str);
        emit listCompaniesSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminCompaniesApi::updateCompany(ModelCompanyUpdate body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/companies");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PATCH");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminCompaniesApi::updateCompanyCallback);

    worker->execute(&input);
}

void
SWGAdminCompaniesApi::updateCompanyCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ModelCompany* output = static_cast<ModelCompany*>(create(json, QString("ModelCompany")));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit updateCompanySignal(output);
    } else {
        emit updateCompanySignalE(output, error_type, error_str);
        emit updateCompanySignalEFull(worker, error_type, error_str);
    }
}


}
