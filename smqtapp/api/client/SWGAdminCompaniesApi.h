/**
 * SMARTBUS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGAdminCompaniesApi_H_
#define _SWG_SWGAdminCompaniesApi_H_

#include "SWGHttpRequest.h"

#include "ModelCompany.h"
#include "ModelCompanyCreate.h"
#include "ModelCompanyUpdate.h"

#include <QObject>

namespace api {

class SWGAdminCompaniesApi: public QObject {
    Q_OBJECT

public:
    SWGAdminCompaniesApi();
    SWGAdminCompaniesApi(QString host, QString basePath);
    ~SWGAdminCompaniesApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void createCompany(ModelCompanyCreate body);
    void deleteCompany(qint64 company_id);
    void getCompanyById(qint64 company_id);
    void listCompanies();
    void updateCompany(ModelCompanyUpdate body);
    
private:
    void createCompanyCallback (HttpRequestWorker * worker);
    void deleteCompanyCallback (HttpRequestWorker * worker);
    void getCompanyByIdCallback (HttpRequestWorker * worker);
    void listCompaniesCallback (HttpRequestWorker * worker);
    void updateCompanyCallback (HttpRequestWorker * worker);
    
signals:
    void createCompanySignal(ModelCompany* summary);
    void deleteCompanySignal();
    void getCompanyByIdSignal(ModelCompany* summary);
    void listCompaniesSignal(QList<ModelCompany*>* summary);
    void updateCompanySignal(ModelCompany* summary);
    
    void createCompanySignalE(ModelCompany* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteCompanySignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void getCompanyByIdSignalE(ModelCompany* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void listCompaniesSignalE(QList<ModelCompany*>* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateCompanySignalE(ModelCompany* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void createCompanySignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void deleteCompanySignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void getCompanyByIdSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void listCompaniesSignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void updateCompanySignalEFull(HttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
